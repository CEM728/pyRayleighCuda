# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.3
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TestSwigPython', [dirname(__file__)])
        except ImportError:
            import _TestSwigPython
            return _TestSwigPython
        if fp is not None:
            try:
                _mod = imp.load_module('_TestSwigPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TestSwigPython = swig_import_helper()
    del swig_import_helper
else:
    import _TestSwigPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class meshfunc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, meshfunc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, meshfunc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d"] = _TestSwigPython.meshfunc_d_set
    __swig_getmethods__["d"] = _TestSwigPython.meshfunc_d_get
    if _newclass:
        d = _swig_property(_TestSwigPython.meshfunc_d_get, _TestSwigPython.meshfunc_d_set)
    __swig_setmethods__["ds"] = _TestSwigPython.meshfunc_ds_set
    __swig_getmethods__["ds"] = _TestSwigPython.meshfunc_ds_get
    if _newclass:
        ds = _swig_property(_TestSwigPython.meshfunc_ds_get, _TestSwigPython.meshfunc_ds_set)
    __swig_setmethods__["data"] = _TestSwigPython.meshfunc_data_set
    __swig_getmethods__["data"] = _TestSwigPython.meshfunc_data_get
    if _newclass:
        data = _swig_property(_TestSwigPython.meshfunc_data_get, _TestSwigPython.meshfunc_data_set)
    __swig_setmethods__["ndims"] = _TestSwigPython.meshfunc_ndims_set
    __swig_getmethods__["ndims"] = _TestSwigPython.meshfunc_ndims_get
    if _newclass:
        ndims = _swig_property(_TestSwigPython.meshfunc_ndims_get, _TestSwigPython.meshfunc_ndims_set)
    __swig_setmethods__["usesSharedData"] = _TestSwigPython.meshfunc_usesSharedData_set
    __swig_getmethods__["usesSharedData"] = _TestSwigPython.meshfunc_usesSharedData_get
    if _newclass:
        usesSharedData = _swig_property(_TestSwigPython.meshfunc_usesSharedData_get, _TestSwigPython.meshfunc_usesSharedData_set)

    def __init__(self, *args):
        this = _TestSwigPython.new_meshfunc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _TestSwigPython.delete_meshfunc
    __del__ = lambda self: None

    def setndims(self, num):
        return _TestSwigPython.meshfunc_setndims(self, num)

    def setdims(self, dims):
        return _TestSwigPython.meshfunc_setdims(self, dims)
    __swig_setmethods__["isRowMaj"] = _TestSwigPython.meshfunc_isRowMaj_set
    __swig_getmethods__["isRowMaj"] = _TestSwigPython.meshfunc_isRowMaj_get
    if _newclass:
        isRowMaj = _swig_property(_TestSwigPython.meshfunc_isRowMaj_get, _TestSwigPython.meshfunc_isRowMaj_set)

    def getndims(self):
        return _TestSwigPython.meshfunc_getndims(self)

    def getdims(self, dims):
        return _TestSwigPython.meshfunc_getdims(self, dims)

    def setres(self, dres):
        return _TestSwigPython.meshfunc_setres(self, dres)

    def getres(self, dres):
        return _TestSwigPython.meshfunc_getres(self, dres)

    def clear(self):
        return _TestSwigPython.meshfunc_clear(self)

    def setToScalar(self, value):
        return _TestSwigPython.meshfunc_setToScalar(self, value)

    def useSharedData(self, dims, ptr2meshdata, resolution):
        return _TestSwigPython.meshfunc_useSharedData(self, dims, ptr2meshdata, resolution)
meshfunc_swigregister = _TestSwigPython.meshfunc_swigregister
meshfunc_swigregister(meshfunc)

# This file is compatible with both classic and new-style classes.


